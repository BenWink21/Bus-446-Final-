# setting the work directory 


setwd("C:/Users/Bewin/OneDrive/Advanced Project Files")

#### importing data
data_16 = read.csv("JC-201605-citibike-tripdata.csv")
data_17 = read.csv("JC-201705-citibike-tripdata.csv")
data_18 = read.csv("JC-201805-citibike-tripdata.csv")
data_19 = read.csv("JC-201905-citibike-tripdata.csv")
data_20 = read.csv("JC-202005-citibike-tripdata.csv")
data_21 = read.csv("JC-202105-citibike-tripdata.csv")
data_22 = read.csv("JC-202205-citibike-tripdata.csv")
data_23 = read.csv("JC-202305-citibike-tripdata.csv")


######Binding data
data_all = rbind(data_16, data_17, data_18, data_19, data_20, data_21, data_22, data_23)

## the above rbind function does not work as there the column names are nto identical. 
## let us check the column names and try to generate a homogeneous dataset

# colnames(data_16)
# colnames(data_17) 
# colnames(data_21)
colnames(data_16)= colnames(data_17)
data_16_20 = rbind(data_16, data_17, data_18, data_19, data_20)
data_21_23 = rbind(data_21, data_22, data_23)

## homogenize the column name

colnames(data_16_20) = c("tripduration", "started_at", "ended_at", 
                         "start_station_id", "start_station_name", "start_lat", "start_lng",
                         "end_station_id", "end_station_name", "end_lat", "end_lng", 
                         "bikeid",  "member_casual", "birth.year","gender" )

#### filter out the common column and join the data sets
library(dplyr)

data_16_20 = data_16_20 %>% dplyr::select("started_at", "ended_at", 
                                          "start_station_id", "start_station_name", "start_lat", "start_lng",
                                          "end_station_id", "end_station_name", "end_lat", "end_lng", 
                                          "member_casual",)

data_21_23 = data_21_23 %>% dplyr::select("started_at", "ended_at", 
                                          "start_station_id", "start_station_name", "start_lat", "start_lng",
                                          "end_station_id", "end_station_name", "end_lat", "end_lng", 
                                          "member_casual",)
data_all = rbind(data_16_20, data_21_23)

install.packages("dplyr")
library(dplyr)

# Assuming you have a dataset named 'data_21_23' with a column 'rideable_type'

# Load the required packages
library(dplyr)

# Assuming data_21_23 is your dataset
# Replace 'rideable_type' with the actual column name in your dataset

# Calculate the total number of Electric Bikes
total_electric_bikes <- data_21_23 %>%
  filter(rideable_type == "electric_bike") %>%
  summarise(total_count_electric = n())

# Calculate the total number of Classic Bikes
total_classic_bikes <- data_21_23 %>%
  filter(rideable_type == "classic_bike") %>%
  summarise(total_count_classic = n())

# Print the results
print("Total Electric Bikes:")
print(total_electric_bikes)

print("Total Classic Bikes:")
print(total_classic_bikes)

# total Classic Bikes- 127358, total Electric Bikes-47354 in 2021-2023

# Assuming you have a dataset named 'data_21_23' with columns 'start_station_id' and 'rideable_type'

# Load the required packages
library(dplyr)

# Assuming data_21_23 is your dataset
# Replace 'start_station_id' and 'rideable_type' with the actual column names in your dataset

# Calculate the total number of Electric Bikes and Classic Bikes for each start_station_id
total_bikes_by_station <- data_21_23 %>%
  group_by(start_station_name, rideable_type) %>%
  summarise(total_count = n())

# Print the result
print("Total Bikes by Station and Rideable Type:")
print(total_bikes_by_station)

# The station with the most Electric Bikes- Hoboken Terminal - Hudson St & Hudson Pl with 2124 bikes
# The station with the most Classic Bikes- Grove St PATH- with 6409 

# Load the required packages
library(ggplot2)

# Assuming you have already calculated total_bikes_by_station using the previous code
# Replace 'total_bikes_by_station', 'start_station_name', 'rideable_type', and 'total_count' with your actual dataset and column names

# Create a scatter plot
ggplot(total_bikes_by_station, aes(x = start_station_name, y = total_count, color = rideable_type)) +
  geom_point(size = 3) +
  labs(title = "Total Bikes by Station and Rideable Type",
       x = "Start Station Name",
       y = "Total Count",
       color = "Rideable Type") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


#---------------------- Question 1 ------------------------------


# Assuming you have a dataset named 'data_21_23' with columns 'rideable_type', 'start_lat', 'start_lng', 'end_lat', 'end_lng'

# Load the required packages
library(dplyr)

# Assuming data_21_23 is your dataset
# Replace 'rideable_type', 'start_lat', 'start_lng', 'end_lat', and 'end_lng' with the actual column names in your dataset

# Function to calculate the Haversine distance
haversine_distance <- function(lat1, lon1, lat2, lon2) {
  R <- 6371
  lat1 <- radians(lat1)
  lon1 <- radians(lon1)
  lat2 <- radians(lat2)
  lon2 <- radians(lon2)
  
  dlat <- lat2 - lat1
  dlon <- lon2 - lon1
  
  a <- sin(dlat / 2)^2 + cos(lat1) * cos(lat2) * sin(dlon / 2)^2
  c <- 2 * atan2(sqrt(a), sqrt(1 - a))
  
  distance <- R * c
  
  return(distance)
}

# Function to convert degrees to radians
radians <- function(degrees) {
  return(degrees * pi / 180)
}

# Calculate the distance for each row in the dataset
data_21_23 <- data_21_23 %>%
  mutate(distance = haversine_distance(start_lat, start_lng, end_lat, end_lng))

# Sum up the distances for each rideable type
total_distance_by_type <- new_data %>%
  group_by(rideable_type) %>%
  summarise(total_distance = sum(distance))

# Print the result
print("Total Distance Traveled by Rideable Type:")
print(total_distance_by_type)

#Total Distance Electric Bike- 59978.33 Kilometers 
#Total Distance Classic Bike- 144609.75 Kilometers

# Load the required packages
library(ggplot2)

# Define the data
total_distances <- data.frame(
  rideable_type = c("Electric Bike", "Classic Bike"),
  total_distance = c(59978.33, 144609.75)
)

# Create a bar graph
ggplot(total_distances, aes(x = rideable_type, y = total_distance, fill = rideable_type)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Distance Traveled by Rideable Type",
       x = "Rideable Type",
       y = "Total Distance (Kilometers)",
       fill = "Rideable Type") +
  theme_minimal()

#----------------------Question 2 -------------------------------


# Load the required packages
library(lubridate)
library(dplyr)

# Assuming your dataset is named 'data_all' and has a column 'started_at' with date information
# Replace 'data_all' and 'started_at' with your actual dataset and column name

# Add a column for the day of the week as a numeric value
data_all <- data_all %>%
  mutate(day_of_week_numeric = wday(started_at, label = FALSE))

# Print the updated dataset
print("Updated dataset:")
print(data_all)

# Load the required packages
library(dplyr)

# Assuming your dataset is named 'data_21_23' with columns 'member_casual' and 'day_of_week_numeric'
# Replace 'data_21_23', 'member_casual', and 'day_of_week_numeric' with your actual dataset and column names

# Print unique values in the 'member_casual' column to understand the available values
print("Unique values in member_casual:")
print(unique(data_21_23$member_casual))

# Calculate the total number of casual uses for each day of the week
total_casual_uses_by_day <- data_21_23 %>%
  group_by(day_of_week_numeric, member_casual) %>%
  summarise(total_casual_uses = n())

# Print the result
print("Total Casual Uses by Day of the Week:")
print(total_casual_uses_by_day)

# Load the required packages
library(dplyr)
library(ggplot2)

# Assuming your dataset is named 'data_21_23' with columns 'member_casual' and 'day_of_week_numeric'
# Replace 'data_21_23', 'member_casual', and 'day_of_week_numeric' with your actual dataset and column names

# Calculate the total number of casual uses for each day of the week
total_casual_uses_by_day <- data_21_23 %>%
  group_by(day_of_week_numeric, member_casual) %>%
  summarise(total_casual_uses = n())

# Create a bar graph
ggplot(total_casual_uses_by_day, aes(x = factor(day_of_week_numeric), y = total_casual_uses, fill = member_casual)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Total Casual Uses by Day of the Week",
       x = "Day of the Week",
       y = "Total Casual Uses",
       fill = "Member Type") +
  theme_minimal()
#------------------------------ Question 3 ------------------------
